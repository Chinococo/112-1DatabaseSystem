version: "3"

services:
  webserver:
    build: 
      context: ./bin/${PHPVERSION}
    container_name: '${COMPOSE_PROJECT_NAME}-${PHPVERSION}'
    restart: 'always'
    ports:
            - "${HOST_MACHINE_UNSECURE_HOST_PORT}:80"
            - "${HOST_MACHINE_SECURE_HOST_PORT}:443"
    links: 
      - database
    volumes: 
      - ${DOCUMENT_ROOT-./www}:/var/www/html
      - ${PHP_INI-./config/php/php.ini}:/usr/local/etc/php/php.ini
      - ${VHOSTS_DIR-./config/vhosts}:/etc/apache2/sites-enabled
      - ${LOG_DIR-./logs/apache2}:/var/log/apache2
    environment:
      PMA_PORT: ${HOST_MACHINE_PMA_PORT}
    #command: ["sh", "-c", "ngrok authtoken $NGROK_AUTH_TOKEN && ngrok http 80 && apache2-foreground"]  
  database:
    build:
      context: "./bin/${DATABASE}"
    container_name: '${COMPOSE_PROJECT_NAME}-database'
    network_mode: "host"  # 使用Host Network
    restart: 'always'
    ports:
      - "${HOST_MACHINE_MYSQL_PORT}:3306"
    volumes: 
      - ./sqls:/docker-entrypoint-initdb.d
      - ${MYSQL_LOG_DIR-./logs/mysql}:/var/log/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: '${COMPOSE_PROJECT_NAME}-phpmyadmin'
    links:
      - database
    environment:
      PMA_HOST: database
      PMA_PORT: 3306
      PMA_USER: ${MYSQL_USER}
      PMA_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    # command: ["sh", "-c", "ngrok http 80 && phpmyadmin"]  
    ports:
       - '${HOST_MACHINE_PMA_PORT}:80'
    volumes: 
      - /sessions
      - ${PHP_INI-./config/php/php.ini}:/usr/local/etc/php/conf.d/php-phpmyadmin.ini
  #redis:
  #  container_name: '${COMPOSE_PROJECT_NAME}-redis'
  #  network_mode: "host"  # 使用Host Network
  #  image: redis:latest
  #  ports:
  #    - "${HOST_MACHINE_REDIS_PORT}:6379"
  python:
    build: ./python
    network_mode: "host"  # 使用Host Network
    working_dir: /opt/apps/test
    container_name: '${COMPOSE_PROJECT_NAME}-python'
    volumes:
      - ./python/result:/opt/apps/test
  swagger-editor:
    image: swaggerapi/swagger-editor
    container_name: "${COMPOSE_PROJECT_NAME}-swagger-editor"
    ports:
      - "${HOST_MACHINE_SWAGGER_EDITOR_EDITOR}:8080"
  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: "${COMPOSE_PROJECT_NAME}-swagger-ui"
    ports:
      - "${HOST_MACHINE_SWAGGER_EDITOR}:8080"
  react-app:
    network_mode: "host"  # 使用Host Network
    container_name: '${COMPOSE_PROJECT_NAME}-react'
    build:
      context: ./react/
    ports:
      - "${HOST_MACHINE_REACT}:3000"
  nodejs-app:
    build: ./nodejs/  # 使用當前目錄的 Dockerfile 進行構建
    network_mode: "host"  # 使用Host Network
    ports:
      - "${HOST_MACHINE_Nodejs}:5000"  # 映射容器的 3000 埠到主機的 3000 埠        
  